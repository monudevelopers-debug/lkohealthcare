version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lucknow-healthcare-db
    environment:
      POSTGRES_DB: lucknow_healthcare
      POSTGRES_USER: healthcare_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthcare_user -d lucknow_healthcare"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lucknow-healthcare-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lucknow-healthcare-backend
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/lucknow_healthcare
      SPRING_DATASOURCE_USERNAME: healthcare_user
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      APP_URL: ${APP_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      PROVIDER_DASHBOARD_URL: ${PROVIDER_DASHBOARD_URL}
      ADMIN_DASHBOARD_URL: ${ADMIN_DASHBOARD_URL}
    ports:
      - "8080:8080"
    networks:
      - healthcare-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flutter Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lucknow-healthcare-frontend
    environment:
      API_URL: ${API_URL}
    ports:
      - "3000:80"
    networks:
      - healthcare-network
    depends_on:
      - backend
    restart: unless-stopped

  # Provider Dashboard
  provider-dashboard:
    build:
      context: ./provider-dashboard
      dockerfile: Dockerfile
    container_name: lucknow-healthcare-provider-dashboard
    environment:
      REACT_APP_API_URL: ${API_URL}
    ports:
      - "3001:80"
    networks:
      - healthcare-network
    depends_on:
      - backend
    restart: unless-stopped

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    container_name: lucknow-healthcare-admin-dashboard
    environment:
      REACT_APP_API_URL: ${API_URL}
    ports:
      - "3002:80"
    networks:
      - healthcare-network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lucknow-healthcare-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - healthcare-network
    depends_on:
      - frontend
      - provider-dashboard
      - admin-dashboard
      - backend
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lucknow-healthcare-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - healthcare-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lucknow-healthcare-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3003:3000"
    networks:
      - healthcare-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  healthcare-network:
    driver: bridge
